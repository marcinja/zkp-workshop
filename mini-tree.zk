open Extended_lib;

let preimage_length = 256i;
type hash = list#256(bool);
type hashean = list#256(boolean);

let utxo_set_size = 4i;
type utxo_set = list#4(hash);
type utxo_setean = list#4(hashean);

type utxo_phashes = list#4(field);

let pad_to_length = fun (xs) => {
  let n = List.length(xs);
  if (n > preimage_length) {
    failwith("Too big to be a preimage");
  } ;

  if (n < preimage_length) {
    xs @ List.init(preimage_length - n, fun (_) => { false; });
  } else {
    xs;
  };
};

// Returns UTXO string, and its padded list versoin
let get_proof_utxo: unit -> hash = fun () => {
		// Load UTXO set.
		let chan = open_in ("dumb-utxo-proof.dat");
		let utxo = input_line (chan);
		close_in_noerr (chan);

  	let utxo_hash = pad_to_length(Blake2.string_to_bool_list(utxo));
	//	(utxo, utxo_hash);
		utxo_hash;
};

let get_utxo_set : unit -> utxo_set = fun () => {
		// Load UTXO set.
		let chan = open_in ("dumb-utxo-set.dat");
		let line1 = input_line (chan);
		let line2 = input_line (chan);
		let line3 = input_line (chan);
		let line4 = input_line (chan);
		close_in_noerr (chan);

  	let l1 = pad_to_length(Blake2.string_to_bool_list(line1));
  	let l2= pad_to_length(Blake2.string_to_bool_list(line2));
  	let l3 = pad_to_length(Blake2.string_to_bool_list(line3));
  	let l4 = pad_to_length(Blake2.string_to_bool_list(line4));
		[l1, l2, l3, l4];
};


let main = fun (expected_output : field, ()) => {
  let params = load_pedersen_params("bn128-params");

	// Get the utxo we want to prove inclusion for, and spendability.
	let proof_utxo_blist : hashean = Prover {
		get_proof_utxo();	
 	};
	let proof_utxo_hash : field = Pedersen.digest_bits(params, proof_utxo_blist);

	// Get the whole set of utxos.
 	let utxos : utxo_setean = Prover {
		get_utxo_set();
	}; 
	let utxo_hashes : utxo_phashes = List.map(fun (u) => {
			Pedersen.digest_bits(params, u);
  	} ,utxos
	);

	// Check that the set matches the known utxo set.
  // Lazy hash accumulator instead of a Merkle tree...
  // TODO: actual Merkle tree.
  let root : field = List.fold_left( 
    fun(acc, x) => { 
      Pedersen.digest_bits(params,
        Field.to_bits(acc) @ Field.to_bits(x)
      ); 
    },
    0,
    utxo_hashes
  );
  Field.Assert.equal(expected_output, root);

	// Check that the utxo we care about is in the set we just hashed.
	let any_equal = List.map(fun (h) => {
			Field.equal(proof_utxo_hash, h);
		}, utxo_hashes
	);
	
	// We can use .exactly_one or .any. The fact that there is only one is checked by
  // our validation of the Bitcoin blockchain outside of this proof.
	Boolean.Assert.exactly_one(any_equal);
};

/*
   (* 
     Stolen from  stdlib/extended_lib.ml
    *)
    let string_to_bool_list s  =
      List.init(8i * String.length(s), ~f:(fun (i) ->
        let c = int_of_char(String.get(s, i / 8i));
        let j = mod(i, 8i);
        land(lsr(c,j), 1i) = 1i;
  
    (*
      TODO: add sanity checks, length checks, etc.
    *)
    let parse_utxo str = 
      let comma = ',' in
      match String.split ~on:comma s with
        | [txid; n; value; script] ->
          string_to_bool_list(txid) @ string_to_bool_list(n) @ string_to_bool_list(value) @ string_to_bool_list(script) 
        | _ ->
            failwith err

    let load_utxo_set path =
      let semi_colon = ';' in
      let err =
        "Bad utxo_set. Each line should consist of 4 , separated pairs."
      in
      let strs = Array.of_list (In_channel.read_lines path) in
      Array.map
        ~f:(fun s ->
          match Core.List.map ~f:parse_utxo (String.split ~on:semi_colon s) with
          | [x1; x2] -> (* TODO: make this accept any number of utxos *) 
              (x1, x2)
          | _ ->
              failwith err )
        strs


*/

	/*
	// we can verify the above with this code ->
	let l : hashean = Prover {
		get_preimage();
	}; 
	let r : hashean = Prover {
		get_preimage();
	}; 
  let left_hash : field = Pedersen.digest_bits(params, l);
	let right_hash : field = Pedersen.digest_bits(params, r);
	*/


